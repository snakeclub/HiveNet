# 运行用户(注意windows需屏蔽)
# user  nobody;

# 启动进程,通常设置成和cpu的数量相等
worker_processes  1;

# 全局错误日志, 常见的错误日志级别有[debug | info | notice | warn | error | crit | alert | emerg]，级别越高记录的信息越少
# 生产场景一般是 warn | error | crit 这三个级别之一
# 日志文件名格式为app[ip/hostname][_moudle][_info/debug/...][.n].log
error_log  logs/static_error.log  error;

#pid        logs/nginx.pid;

# 工作模式及连接数上限
events {
    # epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    # 仅用于linux2.6以上内核,可以大大提高nginx的性能（其他操作系统或内核需屏蔽）
    # use   epoll; 
    
    # 单个后台worker process进程的最大并发链接数
    worker_connections  1024;
    
    # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
    # 为什么上面反向代理要除以4，应该说是一个经验值
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
    # $ cat /proc/sys/fs/file-max
    # 输出 34336
    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
    # 使得并发总数小于操作系统可以打开的最大文件数目
    # 其实质也就是根据主机的物理CPU和内存进行配置
    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
    # ulimit -SHn 65535
}


http {
    # 设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    # 设定日志格式 (默认)
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    
    # 访问日志, 日志文件名格式为app[ip/hostname][_moudle][_info/debug/...][.n].log
    # 语法为access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]
    # access_log  logs/static_info.log  main;
    access_log off;

    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    # 对于普通应用，必须设为 on,
    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    # 以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    # 连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay     on;

    # 开启gzip压缩
    gzip  on;
    gzip_disable "MSIE [1-6].";
    
    # 设定请求缓冲
    client_header_buffer_size    128k;
    large_client_header_buffers  4 128k;

    # 设定虚拟主机配置，静态资源服务器
    server {
        # 侦听8081端口
        listen       8081;
        # 定义使用 localhost 作为域名访问
        server_name  localhost;
        
        # 定义服务器的默认网站根目录位置
        root ../static_server;
    
        # 首页，指定主页，如果没有其他匹配，根据uri在../static_server下找资源
        location / {
            index  login.html;
        }
        
        # 图片资源请求设置
        location ~* \.(gif|jpg|png|bmp)$ {
            # 防盗链设置
            valid_referers none blocked *.hivenet.com server_names ~\.google\. ~\.baidu\.;
            if ($invalid_referer) {
                return 403;
                # 或者直接返回以下提示图片
                # rewrite ^/ http://www.hivenet.com/403.jpg;
            }
            
            # 设置本地缓存过期时间为30天，充分利用客户端缓存提升性能
            # 如果频繁更新，则可以设置得小一点。
            expires 30d;
            
            # 找不到图片资源，返回指定图片
            try_files $uri /pic/no-image.jpg;
        }
        
        # 媒体文件资源请求设置（大文件）
        location ~* \.(mp3|mp4) {
            # 设置缓存过期时间
            expires 30d;
            
            # 传输优化
            sendfile           on;
            sendfile_max_chunk 1m;
            tcp_nodelay       on;
            keepalive_timeout 65;
        }
        
        # 禁止访问的资源类型或路径，示例为未经检查的上传文件资源不允许访问
        location ^~ /uncheck_upload/ {
            deny  all;
        }
        
        # 自定义404错误页面
        error_page  404              /error/404.html;
    
        # 自定义5xx错误页面
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   ../static_server/error;
        }
    }

}
