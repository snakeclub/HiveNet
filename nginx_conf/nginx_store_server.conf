# 运行用户，仅linux
# user  nobody;

# 启动进程,通常设置成和cpu的数量相等
worker_processes  1;

# 全局错误日志, 常见的错误日志级别有[debug | info | notice | warn | error | crit | alert | emerg]，级别越高记录的信息越少
# 生产场景一般是 warn | error | crit 这三个级别之一
# 日志文件名格式为app[ip/hostname][_moudle][_info/debug/...][.n].log
error_log  logs/store_server_error.log  error;

# 指定进程id的存储文件的位置
pid        logs/nginx_store_server.pid;

# 工作模式及连接数上限
events {
    # epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    # 仅用于linux2.6以上内核,可以大大提高nginx的性能
    # use   epoll;

    # 单个后台worker process进程的最大并发链接数
    worker_connections  1024;

    # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
    # 为什么上面反向代理要除以4，应该说是一个经验值
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
    # $ cat /proc/sys/fs/file-max
    # 输出 34336
    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
    # 使得并发总数小于操作系统可以打开的最大文件数目
    # 其实质也就是根据主机的物理CPU和内存进行配置
    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
    # ulimit -SHn 65535
}


http {
    # 设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    # 设定日志格式，满足hivenet_log_standards_v1.0.1规范
    log_format  nginx_http_fmt  '[$fmt_localtime][INFO][PID:$pid]'
                                '[IP:$remote_addr][REMOTE_PORT:$remote_port][PORT:$server_port][SYS:$remote_user][SEQ:$connection][USE:$request_time s]'
                                '[REQ:$request][RSP_STATUS:$status]';

    # 利用lua方法自定义日志时间格式
    # 自定义nginx 变量 $fmt_localtime,因为在http context不能够使用 set $variable，采用map的方式
    map $host $fmt_localtime {
        default '';
    }

    # 用 log_by_lua_block 设置 ngx.fmt_localtime的时间
    log_by_lua_block {
       ngx.var.fmt_localtime = ngx.localtime();
    }

    # 访问日志, 日志文件名格式为app[ip/hostname][_moudle][_info/debug/...][.n].log
    # 语法为access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]
    access_log  logs/store_server_info.log  nginx_http_fmt  buffer=32k flush=5m;

    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    # 对于普通应用，必须设为 on,
    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    # 以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    # 连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  60;
    tcp_nodelay     on;

    # 开启gzip压缩
    gzip  on;
    gzip_disable "MSIE [1-6].";
    gzip_min_length    1k;
    gzip_buffers    4 16k;
    gzip_http_version  1.1;
    gzip_comp_level  2;
    # gzip_types  text/plain application/x-javascript text/css  application/xml;
    gzip_vary on;

    # 设定请求缓冲
    client_header_buffer_size    128k;
    large_client_header_buffers  4 128k;

    # 设定虚拟主机配置，静态资源服务器
    server {
        # 侦听8081端口
        listen       8082;

        # 定义使用 127.0.0.1 作为域名访问，windows使用localhost响应会很慢
        server_name  127.0.0.1;

        # 默认字符集
        charset utf-8;

        # 定义服务器的默认网站根目录位置
        root ../store_server;

        # 自定义主应用的变量
        set $static_host http://127.0.0.1;
        set $default_app App/HiveNet/master/0.0.1;

        # 首页，如果不带任何URI的情况下，重定向到首页
        location = / {
            proxy_pass $static_host;
        }

        # 指定404错误的页面
        error_page  404              /404.html;
        location = /404.html {
            proxy_pass $static_host/$default_app/common;
        }

        # 定义错误提示页面
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            proxy_pass $static_host/$default_app/common;
        }

        # 音频资源请求，文件后缀为mp3或mp4这类文件，行传输优化
        location ~* \.(gz|tar|zip) {
            # 过期30天，静态文件不怎么更新，过期可以设大一点，。
            expires 30d;
            sendfile           on;
            sendfile_max_chunk 1m;
            tcp_nodelay       on;
            keepalive_timeout 65;
        }
    }

}
