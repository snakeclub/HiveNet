# 运行用户
# user  nobody;

# 启动进程,通常设置成和cpu的数量相等
worker_processes  1;

# 全局错误日志, 常见的错误日志级别有[debug | info | notice | warn | error | crit | alert | emerg]，级别越高记录的信息越少
# 生产场景一般是 warn | error | crit 这三个级别之一
# 日志文件名格式为app[ip/hostname][_moudle][_info/debug/...][.n].log
error_log  logs/proxy_server_error.log  error;

pid        logs/nginx_proxy_server.pid;

# 工作模式及连接数上限
events {
    # epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    # 仅用于linux2.6以上内核,可以大大提高nginx的性能
    # use   epoll;

    # 单个后台worker process进程的最大并发链接数
    worker_connections  1024;

    # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
    # 为什么上面反向代理要除以4，应该说是一个经验值
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
    # $ cat /proc/sys/fs/file-max
    # 输出 34336
    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
    # 使得并发总数小于操作系统可以打开的最大文件数目
    # 其实质也就是根据主机的物理CPU和内存进行配置
    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
    # ulimit -SHn 65535
}


http {
    # 设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;


    # 设定日志格式
    log_format  main_log_fmt  '[$fmt_localtime][INFO][PID:$pid]'
                              '[IP:$remote_addr][REMOTE_PORT:$remote_port][PORT:$server_port][SYS:$remote_user][SEQ:$connection][USE:$request_time s]'
                              '[REQ:$request][RSP_STATUS:$status]';


    # 格式符合hivenet_log_standards，接口日志规范
    # http://www.ttlsa.com/nginx/nginx-post-response-log/
    # https://blog.csdn.net/u010087956/article/details/51889397
    log_format hivenet_http_log_fmt '[$fmt_localtime][INFO][PID:$pid][TID:][FILE:][FUN:]'
                                    '[INF-RECV][IP:$remote_addr][PORT:$server_port][SYS:$remote_user][SEQ:$connection][USE:$request_time s]'
                                    '[REMOTE_PORT:$remote_port]'
                                    '$request\r\n'
                                    '$req_header\r\n\r\n'
                                    '$request_body\r\n'
                                    '[INF-RET][SEQ:$connection][USE:$request_time s]'
                                    '$server_protocol $status \r\n'
                                    '$resp_header\r\n\r\n'
                                    '$resp_body';

    # 访问日志, 日志文件名格式为app[ip/hostname][_moudle][_info/debug/...][.n].log
    # 语法为access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]
    access_log  logs/proxy_server_info.log  main_log_fmt;


    # 利用lua方法自定义日志时间格式
    # 自定义nginx 变量 $fmt_localtime,因为在http context不能够使用 set $variable，采用map的方式
    map $host $fmt_localtime {
        default '';
    }

    # 用 log_by_lua_block 设置 ngx.fmt_localtime的时间
    log_by_lua_block {
       ngx.var.fmt_localtime = ngx.localtime();
    }


    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    # 对于普通应用，必须设为 on,
    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    # 以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    tcp_nopush     on;

    # 连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  10;
    tcp_nodelay     on;

    # 设定请求缓冲
    client_header_buffer_size    128k;
    large_client_header_buffers  4 128k;

    # 添加后端应用服务器列表，真实应用服务器都放在这
    # 静态资源服务器
    upstream static_server_pool
    {
        least_conn;  #把请求转发给连接数较少的后端服务器
        #server 后端服务器地址:端口号 weight表示权值，权值越大，被分配的几率越大;
        server 127.0.0.1:8081 weight=4 max_fails=2 fail_timeout=30s;
        # server 127.0.0.1:8071 weight=4 max_fails=2 fail_timeout=30s;
    }

    # 仓库服务器
    upstream store_server_pool
    {
        least_conn;
        server 127.0.0.1:8082 weight=4 max_fails=2 fail_timeout=30s;
        # server 127.0.0.1:8072 weight=4 max_fails=2 fail_timeout=30s;
    }

    # 应用服务器
    upstream app_server_pool
    {
        least_conn;
        server 127.0.0.1:8083 weight=4 max_fails=2 fail_timeout=30s;
        # server 127.0.0.1:8093 weight=4 max_fails=2 fail_timeout=30s;
    }

    # 设定虚拟主机配置，http代理服务
    server {
        # 侦听80端口
        listen       80;
        # 定义使用 127.0.0.1 作为域名访问
        server_name  127.0.0.1;

        # 默认字符集
        charset utf-8;

        # 设定本虚拟主机的访问日志
        # access_log  logs/nginx_proxy_info.log  main;

        set $req_header "";
        set $resp_header "";
        header_filter_by_lua '
                local h = ngx.resp.get_headers()
                for k, v in pairs(h) do
                    ngx.var.resp_header=ngx.var.resp_header..k..": "..v
                end

                local h = ngx.req.get_headers()
                for k, v in pairs(h) do
                    ngx.var.req_header=ngx.var.req_header..k..": "..v
                end
            ';

        # 获取日志的响应报文体
        set $resp_body ""; # 这个必须放到最外层，否则日志取不到默认值
        lua_need_request_body on;
        body_filter_by_lua '
                        local resp_body = string.sub(ngx.arg[1], 1, 1000)
                        ngx.ctx.buffered = (ngx.ctx.buffered or"") .. resp_body
                        if ngx.arg[2] then
                                ngx.var.resp_body = ngx.ctx.buffered
                        end
          ';

        # 所有默认请求设置跳转到静态资源服务器
        location / {
            proxy_pass http://static_server_pool;
        }

        # 以/store/开头的请求，跳转到仓库资源服务器
        location ^~ /store/ {
            proxy_pass http://store_server_pool;
        }

        # 以/api/开头的请求，跳转到后端应用服务器
        location ^~ /api/ {
            # 只有进入这里的才写详细日志
            access_log  logs/proxy_app_info.log  hivenet_http_log_fmt;
            error_log logs/proxy_app_error.log error;
            proxy_pass http://app_server_pool;
        }

    }

}
